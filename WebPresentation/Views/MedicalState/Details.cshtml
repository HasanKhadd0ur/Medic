@model MedicalStateViewModel

@{
    ViewData["Title"] = "Medical Case Details ";

    ViewData["Controller"] = "MedicalState";
    if (Model.Medicines is null)
        Model.Medicines = new List<MedicineViewModel>();
    var a = 0;

}

<section id="toast-container" class="page-section" style="background-color: #f4f5f7;">
    <div class="container py-2 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-lg-10 mb-4 mb-lg-0">
                <div class="card mb-3" style="border-radius: .5rem;">
                    <div class="row g-0">
                        <div class="col-4 gradient-custom text-center text-black p-4"
                             style="border-top-left-radius: .5rem; border-top-right-radius: .5rem;">
                            <div class=" icon-box mb-3">
                                <div class="icon" style="color: #5e54b3;">
                                    <i class="fas fa-heartbeat fa-4x"></i>
                                </div>
                            </div>
                            <h3>@Model.StateName</h3>
                            <p>AT: @(Model.PrescriptionTime.ToString("dd MMM yyyy HH:mm"))</p>
                            <button class="m-1 btn btn-warning btn-edit" data-id="@Model.Id">Edit</button>
                            <button class="m-1 btn btn-danger btn-delete" data-id="@Model.Id">Delete</button>

                        </div>
                        <div class="col-8">
                            <div class="card-body p-4">
                                <h5>Information:</h5>
                                <hr class="mt-0 mb-4">
                                <div class="col-12 mb-3">
                                    <h6 class="">
                                        Description :
                                        <span class="text-muted">@Model.StateDescription</span>
                                    </h6>
                                </div>
                                <div class="col-12 mb-3">
                                    <h6>Medicines Count:<span id="medCount"> @Model.Medicines.Count()</span></h6>
                                </div>
                            </div>
                            <hr />
                        </div>

                    </div>
                    <div class="col-12 p-4">
                        <h5>Your Medicines in this case:</h5>
                        <hr class="mt-0 ">
                        <div class="row p-4">
                            <div class="table-responsive">
                                <table id="Ingredients_" class="table table-bordered table-hover">
                                    <thead class="thead-light">
                                        <tr>
                                            <th>#</th>
                                            <th>Name</th>
                                            <th>Description</th>
                                            <th>Price</th>
                                            <th>Dosage</th>
                                            <th>Manufacture Name</th>
                                            <th>Manage</th>
                                        </tr>
                                    </thead>
                                    <tbody id="cc">
                                        @if (Model.Medicines.Count == 0)
                                        {
                                            <tr>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                            </tr>

                                        }
                                        @foreach (var ing in Model.Medicines)
                                        {
                                            <tr>
                                                <td>@(a+=1)</td>
                                                <td>@ing.TradeName</td>
                                                <td>@ing.Description</td>
                                                <td>@ing.Price.ToString("C")</td>
                                                <td>@ing.Dosage</td>
                                                <td>@ing.ManufactureName</td>
                                                <td>
                                                    <button class="btn btn-danger btn-sm" ondblclick='DeleteConfirm("Delete Confirm", "Are you sure you want to delete @ing.TradeName from this medical case?", @ing.Id)'>Delete</button>
                                                    <button class="btn btn-info btn-sm" onclick="DetailMedicine(@ing.Id)">Details</button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                            </div>
                        </div>
                        <hr />
                        <div class="row pt-1">

                            <div class="col mb-3">
                                <h6>Go To List</h6>
                                <a asp-action="Index" class="btn btn-secondary">Go Back</a>
                            </div>

                            <div class="col mb-3">
                                <h6>Add New Medicine To your Medical Case </h6>
                                <button onclick="fetchMedicines()" class="btn btn-primary">Get Medicines</button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

</section>

<section style="background-color: #f4f5f7;">
    <div class="container h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col">
                <div class="row g-0">
                    <div class="row d-flex justify-content-center align-items-center h-100">
                        <div id="medicines-table">
                            <!-- Medicines table will be dynamically loaded here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<div id="item-container">
    <div class="modal fade" id="item" tabindex="-1" aria-labelledby="label-" role="dialog"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header border-bottom-0">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">
                            <i class="fas fa-times"></i>
                        </span>
                    </button>
                </div>
                <div class="modal-body text-start p-3">
                    <h5 class="modal-title text-uppercase mb-5" id="exampleModalLabel">title</h5>

                    <p class=" mb-5"> message</p>

                    <hr class="mt-2 mb-4"
                        style="height: 0; background-color: transparent; opacity: .75; border-top: 2px dashed #9e9e9e;">
                    <div class="modal-footer d-flex justify-content-center border-top-0 py-4">

                        <button class="btn btn-info" data-dismiss="modal" aria-label="Close">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        async function fetchMedicines() {
            try {
                debugger
                let response = await fetch('/MedicalState/GetAllMedicines'); // Adjust the endpoint as needed
                if (response.ok) {
                    let medicines = await response.json();
                    populateTable(medicines.result, 'medicines-table');
                } else {
                    console.error('Error:', response.statusText);
                }
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }
        async function updateMedicines() {
               let id =@Model.Id;

            try {
                debugger
                let response = await fetch(`/MedicalState/GetMedicalStateMedicine/?id=${id}`); // Adjust the endpoint as needed
                if (response.ok) {
                    let medicines = await response.json();
                    populateTable(medicines.result, 'Ingredients_');
                } else {
                    console.error('Error:', response.statusText);
                }
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }
        function populateTable(medicines,tableName) {


            let tableBody = document.querySelector('#' + tableName);
            let medCount = document.querySelector('#medCount');
            medCount.innerHTML = medicines.length;
            tableBody.innerHTML = `
            <table id="${tableName}" class="table table-bordered table-hover">
               <thead  class="thead-light">
                  <tr class="mb-3">
                    <td>ID</td>
                    <td>tradeName</td>
                    <td>description</td>
                    <td>price</td>
                    <td>dosage</td>
                    <td>Manufacture Name </td>
                    <td>
                    Manage
                    </td>
                  </tr>

                </thead >
                <tbody id="${tableName + "b"}">
                </tbody>
            </table>`;

            tableBody = document.querySelector("#" + tableName + "b");
            let i = 1
            if (medicines.length == 0) {
                tableBody.innerHTML =`
                     <tr>
                       <td></td>
                       <td></td>
                       <td></td>
                       <td></td>
                       <td></td>
                       <td></td>
                       <td></td>
                      </tr>`
            }
            medicines.forEach(medicine => {
                let row = document.createElement('tr');
                row.classList = "mb-3"

                row.innerHTML = `
                    <td>${i}</td>
                    <td>${medicine.tradeName}</td>
                    <td>${medicine.description}</td>
                    <td>${medicine.price}</td>
                    <td>${medicine.dosage}</td>

                    <td>${medicine.manufactureName}</td>
                    `;
                row.innerHTML +=
                    (tableName == "Ingredients_") ?

                        `<td>
                            <button class="btn btn-sm p-1 btn-danger btn-sm" onclick='DeleteConfirm("Delete Confirm", "Are you sure you want to delete ${medicine.name} From this medical Case" ,${medicine.id})'>Delete</button>
                            <button class="btn btn-sm p-1 btn-info btn-sm" onclick="DetailMedicine( ${medicine.id})">Details</button>

                          </td>`
                    :
                        `<td>
                            <button class="btn btn-sm p-1 btn-primary" onclick="addMedicine( ${medicine.id})">Add</button>
                            <button class="btn btn-sm p-1 btn-primary" onclick="DetailMedicine( ${medicine.id})">Details</button>
                        </td>`
                i+=1;
                tableBody.appendChild(row);
            });
        }
        async function addMedicine(med) {
            let id =@Model.Id;
            try {
            //   showToast('Loading ... ', 'Adding medicine');

                let response = await fetch(`/MedicalState/AddMedicine`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ MedicalStateId: id, MedicineId: med }) // Adjust the body as needed
                });

                if (response.ok) {
                    let result = await response.json();
                    updateMedicines();
                    showToast(result.message, 'Success');
                } else {
                    console.error('Error:', response.statusText);
                    if (response)
                    showToast('Failed to add medicine', 'Error');
                }
            } catch (error) {
                console.error('Fetch error:', error);
                showToast('Failed to add medicine', 'Error');
            }
        }
        async function DetailMedicine(med) {
            let id =@Model.Id;
            try {
                debugger
                let response = await fetch(`/MedicalState/GetMedicineDetails/${med}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                 });

                if (response.ok) {
                    let result = await response.json();
                    console.log(result)
                    showModal('Medicine Details', result.result);
                } else {
                    console.error('Error:', response.statusText);
                    showToast('Failed to add medicine', 'Error');
                }
            } catch (error) {
                console.error('Fetch error:', error);
                showToast('Failed to add medicine', 'Error');
            }
        }
        async function RemoveMedicine(med) {
            let id =@Model.Id;
            debugger;
            try {
        //        showToast('Loading ... ', 'Removing medicine');

                let response = await fetch(`/MedicalState/RemoveMedicine`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ MedicalStateId: id, MedicineId: med }) // Adjust the body as needed
                });

                if (response.ok) {
                    let result = await response.json();

                    updateMedicines();

                    showToast(result.message, result.result);
                } else {
                    console.error('Error:', response.statusText);
                    showToast('Failed to remove medicine', 'Error');
                }
            } catch (error) {
                console.error('Fetch error:', error);
                showToast('Failed to remove medicine', 'Error');
            }
        }
        async function DeleteConfirm(title, message,param) {
            debugger
            const modalBody = document.querySelector('#item-container');
            modalBody.innerHTML = `
                   <div class="modal fade" id="item" tabindex="-1" aria-labelledby="label-" role="dialog"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header border-bottom-0">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">
                                <i class="fas fa-times"></i>
                            </span>
                        </button>
                    </div>
                    <div class="modal-body text-start p-3">
                        <h5 class="modal-title text-uppercase mb-5" id="exampleModalLabel">${title}</h5>

                        <p class=" mb-5"> ${message}</p>

                        <hr class="mt-2 mb-4"
                            style="height: 0; background-color: transparent; opacity: .75; border-top: 2px dashed #9e9e9e;">
                    <div class="modal-footer d-flex justify-content-center border-top-0 py-4">

                        <button class="btn btn-danger" onclick="RemoveMedicine(${param})" data-dismiss="modal" aria-label="Close">Delete</button>

                        <button class="btn btn-info" class="close" data-dismiss="modal" aria-label="Close">Close</button>
                    </div>
                </div>
            </div>
        </div>  `;
            // Show the modal
            const medicineModal = new bootstrap.Modal(document.getElementById('item'));
            medicineModal.show();

        }
            function showToast(message, title) {
       //        const Modal = bootstrap.Modal.getInstance(document.getElementById('item'));
            //    Modal.close();
           // if (Modal) Modal.hide();
       //     Modal.toggle();
         //   Modal.dispose();
                const emedicineModal = new bootstrap.Modal(document.getElementById('item'));
                emedicineModal.hide();
            const modalBody = document.querySelector('#item-container');
            modalBody.innerHTML = `
        <div class="modal fade" id="item" tabindex="-1" aria-labelledby="label-" role="dialog"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header border-bottom-0">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">
                                <i class="fas fa-times"></i>
                            </span>
                        </button>
                    </div>
                    <div class="modal-body text-start p-3">
                        <h5 class="modal-title text-uppercase mb-5" id="exampleModalLabel">${title}</h5>

                        <p class=" mb-5"> ${message}</p>

                        <hr class="mt-2 mb-4"
                            style="height: 0; background-color: transparent; opacity: .75; border-top: 2px dashed #9e9e9e;">
                    <div class="modal-footer d-flex justify-content-center border-top-0 py-4">

                        <button class="btn btn-info" class="close" data-dismiss="modal" aria-label="Close">Close</button>
                    </div>
                </div>
            </div>
        </div>  `;
                // Show the modal
               const medicineModal = new bootstrap.Modal(document.getElementById('item'));
            medicineModal.show();
               // let c = document.getElementById('item')
               // c.classList.add('show')

        }
        function showModal(message, result) {
            debugger
    //        const Modal = new bootstrap.Modal(document.getElementById('item'));
            //    Modal.close();
      //      try { Modal.hide(); } catch { }

            let m = result["manufactureName"]
            console.log(m)
            var s = result.medicineIngredients
            console.log(s)
            var r = ""
            var t = 0;
            for (i in s) {
                console.log(i)
                r+=`
                            <div class="d-flex justify-content-between">
                                <p class="fw-bold mb-0">${t++}</p>

                                <p class="fw-bold mb-0">${s[i].ingredient.name}</p>

                                <p class="text-muted mb-0">${s[i].ratio}</p>
                            </div>
            `}
            const modalBody = document.querySelector('#item-container');
            modalBody.innerHTML = `
                   <div class="modal fade" id="item" tabindex="-1" aria-labelledby="label-" role="dialog"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header border-bottom-0">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">
                                <i class="fas fa-times"></i>
                            </span>
                        </button>
                    </div>
                    <div class="modal-body text-start p-3">
                        <h5 class="modal-title text-uppercase mb-5" id="exampleModalLabel">${result.tradeName}</h5>
                        <p class=" mb-5"> Manufacuture : ${m}</p>

                        <p class=" mb-5"> Side Effect : ${result.sideEffect}</p>

                        <p class="mb-0">Ingredients Summary</p>

                        <hr class="mt-2 mb-4"
                            style="height: 0; background-color: transparent; opacity: .75; border-top: 2px dashed #9e9e9e;">
                        <div class="d-flex justify-content-between">
                            <p class="fw-bold mb-0">#</p>

                            <p class="fw-bold mb-0">Ingredient Name</p>

                            <p class="text-muted mb-0">Ratio</p>
                        </div>
                            ${r}
                        <hr class="mt-2 mb-4"
                            style="height: 0; background-color: transparent; opacity: .75; border-top: 2px dashed #9e9e9e;">
                        <div class="d-flex justify-content-between">
                            <p class="fw-bold">Price</p>

                            <p class="fw-bold">$${result.price}</p>
                        </div>

                    </div>
                    <div class="modal-footer d-flex justify-content-center border-top-0 py-4">

                        <button class="btn btn-info" class="close" data-dismiss="modal" aria-label="Close">Close</button>
                    </div>
                </div>
            </div>
        </div>  `;
            // Show the modal
            const medicineModal = new bootstrap.Modal(document.getElementById('item'));
            medicineModal.show();

        }
    </script>

}
